// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime? @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

}

model User {
  id            String    @id @default(cuid())
  name          String?
  firstName     String?
  lastName      String?
  email         String?   @unique
  password      String?
  location      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  jobs          Job[]
  role          String?   @default("user")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum JobStatus {
  interview
  pending
  accepted
  declined
}

enum JobType {
  internship
  partTime
  fullTime
  remote
}

model Job {
  id          Int       @id @default(autoincrement())
  companyName String    @db.VarChar(100)
  jobPosition String    @db.VarChar(100)
  jobStatus   JobStatus @default(pending)
  jobType     JobType   @default(fullTime)
  jobLocation String    @db.VarChar(100)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
}
